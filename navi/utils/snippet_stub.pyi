from collections.abc import Sequence
from typing import Any

from mobly.controllers.android_device_lib import callback_handler_v2
from mobly.controllers.android_device_lib import snippet_client_v2

class BluetoothSnippet(snippet_client_v2.SnippetClientV2):
  # Mobly
  def scheduleRpc(
      self, method_name: str, delay_ms: int, args: Sequence[Any]
  ) -> callback_handler_v2.CallbackHandlerV2: ...
  # Other
  def ping(self) -> str: ...
  # Adapter
  def factoryReset(self) -> bool: ...
  def enable(self) -> bool: ...
  def disable(self) -> bool: ...
  def adapterSetup(self) -> callback_handler_v2.CallbackHandlerV2: ...
  def adapterTeardown(self, callback_id: str) -> bool: ...
  def getBondedDevices(self) -> list[str]: ...
  def getBondState(self, address: str) -> int: ...
  def getAddress(self) -> str: ...
  def createBond(
      self, address: str, transport: int, address_type: int | None = None
  ) -> bool: ...
  def removeBond(self, address: str) -> bool: ...
  def cancelBond(self, address: str) -> bool: ...
  def connect(self, address: str) -> int: ...
  def disconnect(self, address: str) -> int: ...
  def getDeviceConnected(self, address: str, transport: int) -> bool: ...
  def setPairingConfirmation(self, address: str, confirm: bool) -> bool: ...
  def setPin(self, address: str, pin: str) -> bool: ...
  def setScanMode(self, scan_mode: int) -> int: ...
  def getScanMode(self) -> int: ...
  def startAdvertising(
      self,
      advertise_settings: dict[str, Any],
      advertise_data: dict[str, Any] | None = None,
      scan_response: dict[str, Any] | None = None,
  ) -> str | None: ...
  def stopAdvertising(self, cookie: str) -> None: ...
  def startAdvertisingSet(
      self,
      advertising_set_parameters: dict[str, Any],
      advertise_data: dict[str, Any] | None = None,
      scan_response: dict[str, Any] | None = None,
  ) -> str: ...
  def stopAdvertisingSet(self, cookie: str) -> None: ...
  def startScanning(
      self,
      scan_filter: dict[str, Any] | None = None,
      scan_settings: dict[str, Any] | None = None,
  ) -> callback_handler_v2.CallbackHandlerV2: ...
  def stopScanning(self, callback_id: str) -> None: ...
  def startInquiry(self) -> bool: ...
  def stopInquiry(self) -> bool: ...
  def setAlias(self, address: str, alias_name: str) -> None: ...
  def getAlias(self, address: str) -> str | None: ...
  def setPhonebookAccessPermission(
      self, address: str, permission: int
  ) -> bool: ...
  def setMessageAccessPermission(
      self, address: str, permission: int
  ) -> bool: ...
  def setSimAccessPermission(self, address: str, permission: int) -> bool: ...
  def registerBluetoothQualityReportCallback(
      self,
  ) -> callback_handler_v2.CallbackHandlerV2: ...
  def unregisterBluetoothQualityReportCallback(
      self, callback_id: str
  ) -> None: ...
  # A2DP
  def a2dpSetup(self) -> callback_handler_v2.CallbackHandlerV2: ...
  def a2dpTeardown(self, callback_id: str) -> None: ...
  def setA2dpConnectionPolicy(self, address: str, policy: int) -> None: ...
  def a2dpGetConnectedDevices(self) -> list[str]: ...
  def isA2dpPlaying(self, address: str) -> bool: ...
  # GATT Client
  def gattConnect(
      self,
      address: str,
      transport: int,
      address_type: int | None = None,
  ) -> callback_handler_v2.CallbackHandlerV2: ...
  def gattReconnect(self, cookie: str) -> bool: ...
  def gattDisconnect(self, cookie: str) -> None: ...
  def gattClose(self, cookie: str) -> None: ...
  def gattDiscoverServices(self, cookie: str) -> bool: ...
  def gattGetServices(self, cookie: str) -> list[dict[str, Any]]: ...
  def gattReadCharacteristic(
      self, cookie: str, characteristic_handle: int
  ) -> bool: ...
  def gattWriteCharacteristic(
      self,
      cookie: str,
      characteristic_handle: int,
      value: list[int],
      write_type: int,
  ) -> int: ...
  def gattWriteCharacteristicLong(
      self,
      cookie: str,
      characteristic_handle: int,
      value: str,
      mtu: int,
      write_type: int,
  ) -> None: ...
  def gattWriteDescriptor(
      self,
      cookie: str,
      characteristic_handle: int,
      descriptor_uuid: str,
      value: Sequence[int],
  ) -> int: ...
  def gattSubscribeCharacteristic(
      self,
      cookie: str,
      characteristic_handle: int,
      enabled: bool,
  ) -> bool: ...
  def gattRequestMtu(self, cookie: str, mtu: int) -> bool: ...
  def gattSetPreferredPhy(
      self, cookie: str, tx_phy: int, rx_phy: int, phy_options: int
  ) -> None: ...
  def gattRequestSubrateMode(self, cookie: str, subrate_mode: int) -> int: ...
  # GATT Server
  def gattServerOpen(self) -> callback_handler_v2.CallbackHandlerV2: ...
  def gattServerClose(self, cookie: str) -> None: ...
  def gattServerAddService(
      self, cookie: str, service: dict[str, Any]
  ) -> bool: ...
  def gattServerGetServices(self, cookie: str) -> list[dict[str, Any]]: ...
  def gattServerSendResponse(
      self,
      callbackId: str,
      address: str,
      requestId: int,
      status: int,
      offset: int,
      value: list[int],
  ) -> bool: ...
  def gattServerSendNotification(
      self,
      callbackId: str,
      address: str,
      characteristicHandle: int,
      confirm: bool,
      value: list[int],
  ) -> int: ...
  # HFP-AG
  def hfpAgSetup(self) -> callback_handler_v2.CallbackHandlerV2: ...
  def hfpAgTeardown(self, callback_id: str) -> None: ...
  def setHfpAgConnectionPolicy(self, address: str, policy: int) -> None: ...
  def hfpAgGetConnectedDevices(self) -> list[str]: ...
  def hfpAgSetAudioRouteAllowed(self, allowed: bool) -> None: ...
  def hfpAgGetAudioRouteAllowed(self) -> int: ...
  def hfpAgGetInbandRingtoneEnabled(self) -> bool: ...
  def hfpAgGetAudioState(self, address: str) -> int: ...
  # HFP-HF
  def hfpHfSetup(self) -> callback_handler_v2.CallbackHandlerV2: ...
  def hfpHfTeardown(self, callback_id: str) -> None: ...
  def setHfpHfConnectionPolicy(self, address: str, policy: int) -> None: ...
  def hfpHfGetConnectedDevices(self) -> list[str]: ...
  def hfpHfSetAudioRouteAllowed(self, address: str, allowed: bool) -> None: ...
  def hfpHfGetAudioRouteAllowed(self, address: str) -> bool: ...
  # L2CAP
  def l2capConnect(
      self,
      address: str,
      secure: bool,
      psm: int,
      transport: int,
      address_type: int | None = None,
  ) -> str: ...
  def l2capOpenServer(self, secure: bool, transport: int, psm: int) -> int: ...
  def l2capWaitConnection(self, psm: int) -> str: ...
  def l2capCloseServer(self, psm: int) -> None: ...
  def l2capDisconnect(self, cookie: str) -> None: ...
  def l2capRead(self, cookie: str, bytes_to_read: int | None = None) -> str: ...
  def l2capWrite(self, cookie: str, data: str) -> None: ...
  # RFCOMM
  def rfcommConnectWithUuid(
      self, address: str, secure: bool, uuid: str
  ) -> str: ...
  def rfcommConnectWithChannel(
      self, address: str, secure: bool, channel: int
  ) -> str: ...
  def rfcommOpenServer(self, secure: bool, uuid: str) -> None: ...
  def rfcommCloseServer(self, uuid: str) -> None: ...
  def rfcommWaitConnection(self, uuid: str) -> str: ...
  def rfcommDisconnect(self, cookie: str) -> None: ...
  def rfcommRead(
      self, cookie: str, bytes_to_read: int | None = None
  ) -> str: ...
  def rfcommWrite(self, cookie: str, data: str) -> None: ...
  # Audio
  def audioRegisterCallback(self) -> callback_handler_v2.CallbackHandlerV2: ...
  def audioUnregisterCallback(self, callback_id: str) -> None: ...
  def audioPlaySine(self) -> None: ...
  def audioPlayFile(self, fileUri: str) -> None: ...
  def audioSetRepeat(self, repeatMode: int) -> None: ...
  def audioResume(self) -> None: ...
  def audioPause(self) -> None: ...
  def audioStop(self) -> None: ...
  def audioSetRouteSco(self, address: str) -> None: ...
  def audioSetRouteDefault(self) -> None: ...
  def addMediaItem(self, fileUri: str) -> None: ...
  def startRecording(self, output_path: str) -> None: ...
  def stopRecording(self, output_path: str) -> None: ...
  def setAudioPlaybackOffload(self, enabled: bool) -> None: ...
  def setHandleAudioBecomingNoisy(self, enabled: bool) -> None: ...
  def setVolume(self, stream_type: int, volume: int) -> None: ...
  def getVolume(self, stream_type: int) -> int: ...
  def getMaxVolume(self, stream_type: int) -> int: ...
  def getMinVolume(self, stream_type: int) -> int: ...
  def setAudioAttributes(
      self, attributes: dict[str, Any] | None, handle_audio_focus: bool
  ) -> None: ...
  def registerPlayerListener(self) -> callback_handler_v2.CallbackHandlerV2: ...
  def unregisterPlayerListener(self, callback_id: str) -> None: ...
  # Telecom
  def addCall(
      self, caller_name: str, caller_address: str, is_incoming: bool
  ) -> str: ...
  def answerCall(self, cookie: str) -> None: ...
  def disconnectCall(self, cookie: str) -> None: ...
  def registerTelecomCallback(
      self,
  ) -> callback_handler_v2.CallbackHandlerV2: ...
  def unregisterTelecomCallback(self, callback_id: str) -> None: ...
  def addContacts(self, contacts: list[dict[str, Any]]) -> None: ...
  def getContacts(self) -> list[dict[str, Any]]: ...
  def clearContacts(self) -> None: ...
  def addCallLogs(self, logs: list[dict[str, Any]]) -> None: ...
  def getCallLogs(self) -> list[dict[str, Any]]: ...
  def clearCallLogs(self) -> None: ...
  def notifyMmsSmsChange(self) -> None: ...
  # LE Audio
  def registerLeAudioCallback(
      self,
  ) -> callback_handler_v2.CallbackHandlerV2: ...
  def unregisterLeAudioCallback(self, callback_id: str) -> None: ...
  def setLeAudioConnectionPolicy(self, address: str, policy: int) -> None: ...
  # Input
  def registerInputEventCallback(
      self,
  ) -> callback_handler_v2.CallbackHandlerV2: ...
  def unregisterInputEventCallback(self, callback_id: str) -> None: ...
  # HID Host
  def registerHidHostCallback(
      self,
  ) -> callback_handler_v2.CallbackHandlerV2: ...
  def unregisterHidHostCallback(self, callback_id: str) -> None: ...
  # PAN
  def registerPanCallback(self) -> callback_handler_v2.CallbackHandlerV2: ...
  def unregisterPanCallback(self, callback_id: str) -> None: ...
  def setPanConnectionPolicy(self, address: str, policy: int) -> bool: ...
  def setPanTetheringEnabled(self, enabled: bool) -> None: ...
  # OPP
  def oppShareFiles(self, file_paths: list[str], mime_type: str) -> None: ...
  # Profiles
  def registerProfileCallback(
      self, profile: int
  ) -> callback_handler_v2.CallbackHandlerV2: ...
  def unregisterProfileCallback(self, callback_id: str) -> None: ...
  def setActiveDevice(self, address: str, profiles: int) -> bool: ...
  def getActiveDevices(self, profile: int) -> list[str]: ...
  # Broadcast
  def startBroadcast(
      self,
      broadcast_code: list[int] | None = None,
      settings: dict[str, Any] | None = None,
  ) -> int: ...
  def stopBroadcast(self, broadcast_id: int) -> None: ...
  def getAllBroadcastMetadata(self) -> list[str]: ...
  # BASS
  def registerBassCallback(self) -> callback_handler_v2.CallbackHandlerV2: ...
  def unregisterBassCallback(self, callback_id: str) -> None: ...
  def bassStartSearching(self) -> None: ...
  def bassStopSearching(self) -> None: ...
  def bassAddSource(self, sink: str, source_metadata_string: str) -> int: ...
  def bassRemoveSource(self, sink: str, source_id: int) -> None: ...
  # Distance Measurement
  def startDistanceMeasurement(
      self, params: dict[str, Any]
  ) -> callback_handler_v2.CallbackHandlerV2: ...
  def stopDistanceMeasurement(self, callback_id: str) -> None: ...
  def getSupportedDistanceMeasurementMethods(self) -> list[int]: ...
